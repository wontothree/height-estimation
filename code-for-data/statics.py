import numpy as np

nan = 'nan'
eye_position = [168.2, 171.8, 173.2, 175.2, 177.3, 179.9, 160.5, 163.2, 166.0, 167.4, 169.5, 172.0, 168.1, 169.9, 171.5, 174.0, 176.9, 178.4, 162.5, 164.8, 166.8, 169.1, 171.6, 173.3, 157.0, 159.4, 161.3, 163.4, 165.5, 167.8, 168.9, 170.8, 173.0, 175.0, 176.9, 179.0, 162.4, 165.0, 166.6, 169.1, 171.0, 173.1, 163.4, 165.2, 167.5, 169.7, 172.0, 174.0, 165.0, 167.8, 169.5, 171.9, 174.4, 176.0, 166.6, 168.6, 171.0, 173.0, 174.5, 176.6, 163.4, 165.9, 168.1, 169.9, 172.1, 174.6, 148.9, 151.5, 153.8, 156.0, 157.4, 159.0, 154.0, 156.0, 157.1, 160.5, 161.9, 164.0, 165.7, 167.9, 170.3, 172.1, 174.2, 176.1, 154.3, 156.3, 158.5, 160.5, 162.5, 164.9, 166.6, 169.1, 170.4, 172.1, 174.0, 176.5, 165.6, 167.6, 169.6, 172.3, 174.4, 176.4, 168.3, 170.3, 171.8, 173.1, 176.6, 178.3, 160.0, 162.5, 163.5, 166.7, 169.0, 169.8, 162.0, 163.9, 165.9, 168.3, 169.4, 172.0, 168.4, 170.6, 173.0, 175.3, 177.6, 179.1, 143.1, 145.7, 147.6, 149.9, 151.8, 153.9, 164.0, 166.3, 168.3, 170.0, 172.0, 173.6, 154.0, 157.0, 158.6, 160.5, 163.3, 165.3, 166.9, 169.3, 171.5, 172.9, 174.3, 176.6, 170.1, 172.6, 174.6, 176.5, 179.0, 180.6, 152.1, 154.5, 156.6, 158.6, 160.5, 162.6, 167.6, 169.9, 171.8, 173.5, 176.6, 178.4, 162.0, 164.3, 166.3, 168.0, 171.3, 173.6, 169.1, 171.2, 174.0, 176.4, 178.7, 181.1, 160.6, 162.7, 164.5, 166.4, 169.0, 170.6, 152.5, 154.8, 156.1, 158.6, 160.5, 162.5]

height = [180.125, 182.125, 184.125, 186.125, 188.125, 190.125, 170.8, 172.8, 174.8, 176.8, 178.8, 180.8, 179.425, 181.425, 183.425, 185.425, 187.425, 189.425, 174.15, 176.15, 178.15, 180.15, 182.15, 184.15, 168.675, 170.675, 172.675, 174.675, 176.675, 178.675, 179.0, 181.0, 183.0, 185.0, 187.0, 189.0, 174.0, 176.0, 178.0, 180.0, 182.0, 184.0, 174.875, 176.875, 178.875, 180.875, 182.875, 184.875, 176.525, 178.525, 180.525, 182.525, 184.525, 186.525, 179.675, 181.675, 183.675, 185.675, 187.675, 189.675, 173.7, 175.7, 177.7, 179.7, 181.7, 183.7, 160.7, 162.7, 164.7, 166.7, 168.7, 170.7, 164.875, 166.875, 168.875, 170.875, 172.875, 174.875, 176.85, 178.85, 180.85, 182.85, 184.85, 186.85, 164.5, 166.5, 168.5, 170.5, 172.5, 174.5, 176.45, 178.45, 180.45, 182.45, 184.45, 186.45, 179.3, 181.3, 183.3, 185.3, 187.3, 189.3, 180.025, 182.025, 184.025, 186.025, 188.025, 190.025, 171.025, 173.025, 175.025, 177.025, 179.025, 181.025, 174.375, 176.375, 178.375, 180.375, 182.375, 184.375, 180.7, 182.7, 184.7, 186.7, 188.7, 190.7, 155.625, 157.625, 159.625, 161.625, 163.625, 165.625, 174.775, 176.775, 178.775, 180.775, 182.775, 184.775, 165.725, 167.725, 169.725, 171.725, 173.725, 175.725, 177.575, 179.575, 181.575, 183.575, 185.575, 187.575, 182.075, 184.075, 186.075, 188.075, 190.075, 192.075, 162.65, 164.65, 166.65, 168.65, 170.65, 172.65, 180.825, 182.825, 184.825, 186.825, 188.825, 190.825, 173.775, 175.775, 177.775, 179.775, 181.775, 183.775, 183.85, 185.85, 187.85, 189.85, 191.85, 193.85, 170.9, 172.9, 174.9, 176.9, 178.9, 180.9, 164.1375, 166.1375, 168.1375, 170.1375, 172.1375, 174.1375]

height_estimation = [180.8074832555501, 183.10606562917076, 184.46539632834637, 186.66874283246815, 188.6467349299951, 191.1653963283464, 168.83720666899282, 171.65921457146587, 173.72716715662747, 174.842482050857, 176.942482050857, 180.703230376412, 177.61661639289912, nan, 181.0166163928991, 183.59795499454782, nan, 188.0386242953722, 172.54531730361572, 175.0486638077375, 176.8859866044401, 179.38933310856186, 181.36063219784523, 182.89795499454783, 167.81803401927849, 170.13669541762977, 171.95535681598108, nan, 175.83000240938622, 178.2520103118593, 177.19653736816846, 179.2592145714659, nan, 183.49988387229024, nan, nan, 173.54338842587333, 175.73669541762976, 177.09267961268364, 179.2673252060888, 181.6146875151567, 184.0807112225759, 175.194097239063, 176.1807112225759, 177.7486638077375, 180.72138052340023, nan, 184.65535681598107, 176.59075073494122, 178.0486638077375, 180.4807112225759, 182.75870332010282, 184.44531730361572, 186.28933310856186, 178.88212884895526, 181.2074832555501, 183.11945164565785, 185.56681395472575, 186.70079024730654, 188.7601209464822, 172.5912619863043, 174.64389967723636, 176.92523827888508, 178.64389967723636, 181.37260058795297, 183.6692540838312, 159.18933310856187, 161.09795499454782, 163.3166163928991, 165.8013014986696, 167.16063219784525, 169.49267961268365, 163.67929359619654, 165.31326988877734, 166.9826401003183, 169.89460849042604, 171.21326988877735, 173.27260058795298, 176.96539632834637, 178.8807112225759, 180.9960261168054, 184.42279814977962, 184.12330940114265, 186.55201031185928, 163.3692540838312, 165.32858478300687, 167.28456897806072, 168.91854527064152, 171.1218917747633, 173.19653736816846, 176.4013014986696, 178.9826401003183, 180.6486638077375, 183.894097239063, 184.65535681598107, 186.87067171021056, 178.77685346709106, 180.69551486544236, 182.37016045884752, 185.31417626379366, 187.0074832555501, 188.6414595481309, 178.87401821433235, 180.87401821433235, 182.94338842587334, 184.0807112225759, 186.44197079949396, 188.1013014986696, 169.4352777912504, 172.42330940114266, 174.03334891350798, 175.76925408383119, 178.10992338465556, 179.76397870196703, 173.95677444236043, 176.26346745060397, 177.694097239063, 179.85008143411687, 181.35677444236043, 183.59075073494122, 180.35677444236043, 182.88212884895526, 185.11945164565785, 186.9314200357656, nan, 190.73142003576558, 153.18598660444007, 155.54197079949395, 157.8486638077375, 159.94531730361572, 162.37401821433235, 163.9046480027914, 174.9807112225759, 177.32138052340025, 178.46732520608882, 180.73669541762976, 182.53334891350798, nan, 165.75342793823864, 167.53334891350798, 169.82472702752202, 171.1146875151567, 173.7520103118593, 175.3859866044401, 176.7826401003183, 178.04389967723637, 180.5692540838312, 181.8879154821825, 183.77594709207477, 186.11661639289912, 180.7146875151567, 182.6453173036157, 184.72665590526444, 186.6673252060888, 188.63862429537218, 191.2960261168054, 161.29126198630428, 163.65059268547992, 165.99460849042603, nan, 169.4879154821825, 171.4659075797094, 179.59744374318478, 181.57208933658995, 184.12279814977964, 184.64338842587333, 188.23142003576558, 189.58405772669767, 172.49267961268365, 174.9960261168054, 176.06063219784525, 177.84197079949396, 181.833348913508, 182.95393918960167, 181.99216836132058, nan, 187.29886136956415, 188.72279814977963, 190.61610514153605, 192.73142003576558, 169.99460849042603, 172.09460849042603, 174.05728569372346, 176.0386242953722, nan, 179.303230376412, 162.7486638077375, 164.47929359619656, 166.51134101103492, 168.4826401003183, 170.83000240938622, 172.78933310856186]


result_list = []

for h, he in zip(height, height_estimation):
    if h == 'nan' or he == 'nan':  # 만약 h나 he가 'nan' 문자열이면
        difference = 'nan'  # difference를 'nan' 문자열로 설정합니다.
    else:
        try:
            difference = float(h) - float(he)  # 숫자로 변환하여 차이를 계산합니다.
        except ValueError:
            difference = 'nan'  # 변환 중 에러가 발생하면 'nan' 문자열로 설정합니다.
    
    result_list.append(difference)

print(result_list)

result_list = [-0.6824832555500961, -0.9810656291707573, -0.34039632834637246, -0.5437428324681548, -0.5217349299950911, -1.0403963283463895, 1.962793331007191, 1.1407854285341443, 1.072832843372538, 1.9575179491430106, 1.8575179491430163, 0.09676962358801688, 1.8083836071008932, 'nan', 2.408383607100916, 1.8270450054521916, 'nan', 1.3863757046278238, 1.6046826963842875, 1.1013361922624938, 1.264013395559914, 0.7606668914381487, 0.7893678021547714, 1.2520450054521746, 0.856965980721526, 0.5383045823702446, 0.7196431840189348, 'nan', 0.8449975906137865, 0.42298968814071713, 1.803462631831536, 1.7407854285341102, 'nan', 1.5001161277097594, 'nan', 'nan', 0.45661157412666853, 0.2633045823702389, 0.9073203873163607, 0.732674793911201, 0.38531248484329694, -0.08071122257589991, -0.31909723906301224, 0.6942887774241058, 1.1263361922624995, 0.15361947659977204, 'nan', 0.2196431840189348, -0.06575073494121852, 0.4763361922624938, 0.04428877742410009, -0.23370332010281913, 0.07968269638428183, 0.235666891438143, 0.7928711510447499, 0.46751674444990954, 0.5555483543421644, 0.10818604527426601, 0.9742097526934685, 0.914879053517808, 1.1087380136956995, 1.0561003227636263, 0.7747617211149134, 1.0561003227636263, 0.32739941204701495, 0.030745916168797294, 1.5106668914381203, 1.6020450054521689, 1.3833836071008818, 0.8986985013303865, 1.539367802154743, 1.2073203873163436, 1.195706403803456, 1.5617301112226585, 1.8923598996817077, 0.9803915095739626, 1.6617301112226528, 1.6023994120470206, -0.11539632834637814, -0.030711222575916963, -0.146026116805416, -1.5727981497796293, 0.7266905988573455, 0.29798968814071713, 1.1307459161687916, 1.1714152169931253, 1.2154310219392812, 1.5814547293584837, 1.3781082252367014, 1.303462631831536, 0.04869850133039222, -0.5326401003183037, -0.19866380773751757, -1.4440972390630122, -0.20535681598107658, -0.4206717102105699, 0.5231465329089531, 0.604485134557649, 0.9298395411524893, -0.014176263793643784, 0.29251674444989817, 0.6585404518691007, 1.1509817856676534, 1.1509817856676534, 1.0816115741266685, 1.9442887774241058, 1.5830292005060471, 1.9236985013303922, 1.5897222087496061, 0.6016905988573455, 0.9916510864920269, 1.25574591616882, 0.9150766153444465, 1.261021298032972, 0.41822555763957325, 0.1115325493960313, 0.6809027609369878, 0.5249185658831266, 1.0182255576395676, 0.7842492650587758, 0.3432255576395562, -0.18212884895527282, -0.4194516456578583, -0.2314200357656091, 'nan', -0.03142003576559205, 2.4390133955599254, 2.083029200506047, 1.7763361922625052, 1.6796826963842761, 1.2509817856676477, 1.7203519972086099, -0.2057112225758999, -0.546380523400245, 0.3076747939111897, 0.03830458237024459, 0.24165108649202693, 'nan', -0.028427938238650086, 0.19165108649201557, -0.09972702752202167, 0.6103124848432913, -0.027010311859299918, 0.3390133955599026, 0.792359899681685, 1.5311003227636206, 1.0057459161687916, 1.6870845178174818, 1.7990529079252155, 1.4583836071008704, 1.3603124848432913, 1.4296826963842761, 1.3483440947355518, 1.407674793911184, 1.4363757046278067, 0.7789738831945954, 1.3587380136957279, 0.9994073145200844, 0.655391509573974, 'nan', 1.1620845178175045, 1.1840924202905967, 1.2275562568152054, 1.2529106634100344, 0.702201850220348, 2.181611574126663, 0.593579964234408, 1.2409422733023234, 1.2823203873163607, 0.7789738831945954, 1.7143678021547544, 1.9330292005060414, -0.058348913507984435, 0.8210608103983361, 1.8578316386794143, 'nan', 0.5511386304358439, 1.1272018502203593, 1.233894858463941, 1.1185799642344136, 0.905391509573974, 0.8053915095739796, 0.8427143062765481, 0.8613757046278181, 'nan', 1.5967696235880169, 1.3888361922624881, 1.6582064038034332, 1.6261589889650736, 1.6548598996816963, 1.3074975906137638, 1.348166891438126]




# 숫자만 추출하여 새로운 배열 생성
filtered_data = [x for x in result_list if isinstance(x, (int, float))]  # 숫자 형태인 것만 추출

abs_filtered_data = np.abs(filtered_data)

print(abs_filtered_data)

# numpy 배열로 변환
abs_filtered_data = np.array(abs_filtered_data)

# 평균 계산
if len(abs_filtered_data) > 0:
    mean_value = np.mean(abs_filtered_data)
else:
    mean_value = np.nan  # 만약 모든 값이 'nan'이라면 평균을 'nan'으로 설정

# 최대오차 계산
max_error = np.max(abs_filtered_data)

print("평균값:", mean_value)
print("최대오차:", max_error)
